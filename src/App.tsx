import { useEffect, useState } from 'react'
import './App.css'

/* This component was generated by iterative prompting of GPT-4.1 via Github Copilot.  
   Notes on its construction can be found in the `notes.md` file. 
*/

export function App() {
    return (<><Weather/></>)
}

interface ForecastPeriod {
    number: number;
    name: string;
    startTime: string;
    endTime: string;
    isDaytime: boolean;
    temperature: number;
    temperatureUnit: string;
    temperatureTrend: string | null;
    windSpeed: string;
    windDirection: string;
    icon: string;
    shortForecast: string;
    detailedForecast: string;
}

// Type predicate for ForecastPeriod
function isForecastPeriod(obj: unknown): obj is ForecastPeriod {
    if (typeof obj !== 'object' || obj === null) return false;
    if (!('number' in obj) || typeof obj.number !== 'number') return false;
    if (!('name' in obj) || typeof obj.name !== 'string') return false;
    if (!('startTime' in obj) || typeof obj.startTime !== 'string') return false;
    if (!('endTime' in obj) || typeof obj.endTime !== 'string') return false;
    if (!('isDaytime' in obj) || typeof obj.isDaytime !== 'boolean') return false;
    if (!('temperature' in obj) || typeof obj.temperature !== 'number') return false;
    if (!('temperatureUnit' in obj) || typeof obj.temperatureUnit !== 'string') return false;
    if (!('temperatureTrend' in obj) || (typeof obj.temperatureTrend !== 'string' && obj.temperatureTrend !== null)) return false;
    if (!('windSpeed' in obj) || typeof obj.windSpeed !== 'string') return false;
    if (!('windDirection' in obj) || typeof obj.windDirection !== 'string') return false;
    if (!('icon' in obj) || typeof obj.icon !== 'string') return false;
    if (!('shortForecast' in obj) || typeof obj.shortForecast !== 'string') return false;
    if (!('detailedForecast' in obj) || typeof obj.detailedForecast !== 'string') return false;
    return true;
}

// Type predicate for ForecastPeriod[]
function isForecastPeriodArray(arr: unknown): arr is ForecastPeriod[] {
    return Array.isArray(arr) && arr.every(isForecastPeriod);
}

function Weather() {
    const [periods, setPeriods] = useState<ForecastPeriod[] | null>(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        // Providence, RI coordinates
        const lat = 41.8240;
        const lon = -71.4128;

        // NWS API: get gridpoint for Providence
        fetch(`https://api.weather.gov/points/${lat},${lon}`)
            .then(res => {
                if (!res.ok) throw new Error('Failed to fetch gridpoint');
                return res.json();
            })
            .then(data => {
                const forecastUrl = data.properties.forecast;
                return fetch(forecastUrl);
            })
            .then(res => {
                if (!res.ok) throw new Error('Failed to fetch forecast');
                return res.json();
            })
            .then(data => {
                const periodsData = data?.properties?.periods;
                if (isForecastPeriodArray(periodsData)) {
                    setPeriods(periodsData);
                } else {
                    setError('Forecast data format error');
                }
                setLoading(false);
            })
            .catch(err => {
                setError(err.message);
                setLoading(false);
            });
    }, []);

    if (loading) return <div>Loading weather...</div>;
    if (error) return <div>Error: {error}</div>;
    if (!periods) return null;

    return (
        <div>
            <h2>Providence, RI Weather Forecast</h2>
            <table>
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Temperature</th>
                        <th>Short Forecast</th>
                        <th>Detailed Forecast</th>
                    </tr>
                </thead>
                <tbody>
                    {periods.map((period) => (
                        <tr key={period.number}>
                            <td>{period.name}</td>
                            <td>{`${period.temperature} ${period.temperatureUnit}`}</td>
                            <td>{period.shortForecast}</td>
                            <td>{period.detailedForecast}</td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    );
}

export { Weather };